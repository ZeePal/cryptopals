#!/usr/bin/env python3
from random import randint
from hashlib import sha256


class dh:
    def __init__(self, p=None, g=2):
        if p is None:
            # NIST's value for p
            self.p = 0xffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff
        else:
            self.p = p
        self.g = g

        self._private_key = randint(0, self.p)
        self.public_key = pow(self.g, self._private_key, self.p)

    def generate_session_key(self, partners_public_key):
        s = pow(partners_public_key, self._private_key, self.p)
        return sha256(s.to_bytes((s.bit_length() + 7) // 8, 'big')).digest()


def test_dh(p=None, g=2, loops=10):
    for _ in range(loops):
        alice = dh(p=p, g=g)
        bob = dh(p=p, g=g)

        alices_session_key = alice.generate_session_key(bob.public_key)
        bobs_session_key = bob.generate_session_key(alice.public_key)

        if alices_session_key != bobs_session_key:
            print("Alice & Bob's session keys are different!")
            return False
    return True


if test_dh(p=37, g=5, loops=10000):
    print("Diffie-Hellman Small Number Tests Passed!")
else:
    print("Diffie-Hellman Small Number Tests Failed!")

if test_dh(p=None, g=2, loops=10):
    print("Diffie-Hellman Big Number Tests Passed!")
else:
    print("Diffie-Hellman Big Number Tests Failed!")
