#!/usr/bin/env python3
import sys
from math import ceil
from random import randint
from Crypto.Cipher import AES

expected_output_role = "admin"


def random_bytes(size):
    i = randint(0, 2 ** (8 * size))
    return i.to_bytes(size, sys.byteorder)


unknown_cipher = AES.new(random_bytes(16), AES.MODE_ECB)


class block_wrapper:
    def __init__(self, data, block_size):
        self.data = data
        self.block_size = block_size
        self.count = ceil(len(data) / block_size)

    def __getitem__(self, index):
        x = self.block_size * index
        y = x + self.block_size
        return self.data[x:y]

    def __iter__(self):
        return block_iter(self)


class block_iter:
    def __init__(self, blocks):
        self.current = -1
        self.blocks = blocks

    def __next__(self):
        self.current += 1
        if self.current < self.blocks.count:
            return self.blocks[self.current]
        raise StopIteration


def pad(d, block_size=16):
    r = block_size - (len(d) % block_size)
    if r > 0:
        p = bytes([r]) * r
    else:
        p = bytes([block_size]) * block_size
    return d + p


def unpad(d):
    return d[: -d[-1]]


def profile_for(email):
    clean_email = email.replace("=", "").replace("&", "")
    data = "email={}&uid=10&role=user".format(clean_email).encode()
    return unknown_cipher.encrypt(pad(data))


def process_profile(encrypted_data):
    data = unpad(unknown_cipher.decrypt(encrypted_data))
    return parse_profile(data.decode())


def parse_profile(data):
    output = {}
    length = len(data)
    index = 0
    while index < length:
        key_end = data.find("=", index)
        if key_end == -1:
            break
        key = data[index:key_end]

        value_end = data.find("&", key_end)
        if value_end == -1:
            value_end = length
        value = data[key_end + 1 : value_end]

        output[key] = value
        index = value_end + 1
    return output


def detect_block_and_data_size(f):
    padding = ""
    orig_length = len(f(padding))
    current_length = orig_length

    while current_length == orig_length:
        padding += "A"
        current_length = len(f(padding))

    block_size = current_length - orig_length
    data_size = orig_length - len(padding)
    return block_size, data_size


def get_first_duplicate_pair_index(data, block_size):
    blocks = block_wrapper(data, block_size)
    dups = set()
    for index, block in enumerate(blocks):
        if block in dups:
            return index - 1
        dups.add(block)
    return None


def get_target_block(f, target):
    block_size = len(target)
    marker_block = "S{}E".format("A" * (block_size - 2))
    suffix = "".join([marker_block, marker_block, target])
    prefix = ""
    for _ in range(block_size):
        r = f(prefix + suffix)
        index = get_first_duplicate_pair_index(r, block_size)
        if index:
            return block_wrapper(r, block_size)[index + 2]  # Block after markers
        prefix += "A"
    return None


default_role_size = len(process_profile(profile_for("test@test.com"))["role"])
block_size, data_size = detect_block_and_data_size(profile_for)

cut_block = get_target_block(profile_for, pad(b"admin", block_size).decode())

# How long the email address needs to be for block boundary on target block
#   Can add any multiple of block_size on top of this if you wanted
paste_email_size = (
    (ceil(data_size / block_size) * block_size) + default_role_size - data_size
)
paste_email_suffix = "@test.com"
paste_email = "A" * (paste_email_size - len(paste_email_suffix)) + paste_email_suffix

pasteable_blocks = profile_for(paste_email)
forged_data = pasteable_blocks[:-block_size] + cut_block

output = process_profile(forged_data)
print("Expected Output Role: {}".format(expected_output_role))
print("My Output Role:       {}".format(output["role"]))
print("Raw Result: {}".format(output))

if output["role"] == expected_output_role:
    print("Pass!")
else:
    print("Fail!")
