#!/usr/bin/env python3
import sys
import random
from base64 import b64decode
from math import ceil
from Crypto.Cipher import AES

input_key = b"YELLOW SUBMARINE"
input_nonce = 0
input = b64decode(
    b"L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ=="
)


class block_wrapper:
    def __init__(self, data, block_size):
        self.data = data
        self.block_size = block_size
        self.count = ceil(len(data) / block_size)

    def __getitem__(self, index):
        x = self.block_size * index
        y = x + self.block_size
        return self.data[x:y]

    def __iter__(self):
        return block_iter(self)


class block_iter:
    def __init__(self, blocks):
        self.current = -1
        self.blocks = blocks

    def __next__(self):
        self.current += 1
        if self.current < self.blocks.count:
            return self.blocks[self.current]
        raise StopIteration


def random_bytes(size):
    i = random.randint(0, 2 ** (8 * size))
    return i.to_bytes(size, sys.byteorder)


def xor(a, b):
    r = int.from_bytes(a, sys.byteorder) ^ int.from_bytes(b, sys.byteorder)
    return r.to_bytes(len(a), sys.byteorder)


def ctr_crypt(key, nonce, plain_text, block_size=16):
    output = bytearray()
    counter = 0
    cipher = AES.new(key, AES.MODE_ECB)
    data = block_wrapper(plain_text, block_size)
    for block in data:
        iv = nonce.to_bytes(block_size // 2, "little") + counter.to_bytes(
            block_size // 2, "little"
        )
        xor_block = cipher.encrypt(iv)
        output.extend(xor(xor_block[: len(block)], block))
        counter += 1
    return output


def ctr_test():
    print("=== CTR Test ===")
    test = random_bytes(random.randrange(100, 200))
    test_key = random_bytes(16)
    test_nonce = random.randint(0, 2 ** 64)

    test_encrypted = ctr_crypt(test_key, test_nonce, test)
    test_decrypted = ctr_crypt(test_key, test_nonce, test_encrypted)

    if test_decrypted == test:
        print("Pass!")
    else:
        print("Fail!")


ctr_test()
print("\n=== Decrypted Text ===")
print(ctr_crypt(input_key, input_nonce, input).decode())
