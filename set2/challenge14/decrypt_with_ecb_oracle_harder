#!/usr/bin/env python3
import base64
import sys
from random import randint, randrange
from math import ceil
from Crypto.Cipher import AES

hidden = base64.b64decode(
    """Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkg
aGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBq
dXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUg
YnkK"""
)


def random_bytes(size):
    i = randint(0, 2 ** (8 * size))
    return i.to_bytes(size, sys.byteorder)


unknown_prefix = random_bytes(randrange(0, 64))
unknown_cipher = AES.new(random_bytes(16), AES.MODE_ECB)


def pad(d, block_size=16):
    r = block_size - (len(d) % block_size)
    if r > 0:
        p = bytes([r]) * r
    else:
        p = bytes([block_size]) * block_size
    return d + p


def unpad(d):
    return d[: -d[-1]]


def encryption_oracle(data):
    return unknown_cipher.encrypt(pad(b"".join([unknown_prefix, data, hidden])))


class block_wrapper:
    def __init__(self, data, block_size):
        self.data = data
        self.block_size = block_size
        self.count = ceil(len(data) / block_size)

    def __getitem__(self, index):
        x = self.block_size * index
        y = x + self.block_size
        return self.data[x:y]

    def __iter__(self):
        return block_iter(self)


class block_iter:
    def __init__(self, blocks):
        self.current = -1
        self.blocks = blocks

    def __next__(self):
        self.current += 1
        if self.current < self.blocks.count:
            return self.blocks[self.current]
        raise StopIteration


def get_first_duplicate_pair_index(data, block_size):
    blocks = block_wrapper(data, block_size)
    dups = set()
    for index, block in enumerate(blocks):
        if block in dups:
            return index - 1
        dups.add(block)
    return None


def detect_block_size(f):
    padding = bytearray()
    orig_length = len(f(padding))
    current_length = orig_length

    while current_length == orig_length:
        padding.append(ord("A"))
        current_length = len(f(padding))

    return current_length - orig_length


def get_alignment_prefix(f, block_size):
    markers = "S{}E".format("A" * (block_size - 2)).encode() * 2
    padding = bytearray()
    for _ in range(block_size):
        prefix = padding + markers
        r = f(prefix)
        if get_first_duplicate_pair_index(r, block_size):
            return prefix
        padding.append(ord("A"))
    return None


def get_target_size(f, prefix, block_size):
    padding = bytearray()
    starting = f(prefix)
    prefix_block_length = (
        get_first_duplicate_pair_index(starting, block_size) + 2
    ) * block_size
    target_block_length = len(starting) - prefix_block_length

    orig_length = len(starting)
    current_length = orig_length

    while current_length == orig_length:
        padding.append(ord("A"))
        current_length = len(f(prefix + padding))

    return target_block_length - len(padding)


def is_ebc_oracle(f, block_size):
    s = b"A" * (block_size * 5)
    return get_first_duplicate_pair_index(f(s), block_size)


def create_search_prefix(block_size, known):
    size = block_size - 1
    tail = known[-size:]
    padding = size - len(tail)
    return (b"A" * padding) + tail


def get_target_block(f, prefix, block_size, block_index, byte_index):
    remaining = block_size - byte_index - 1
    data = f(prefix + b"A" * remaining)
    blocks = block_wrapper(data, block_size)
    return blocks[get_first_duplicate_pair_index(data, block_size) + 2 + block_index]


def find_next_byte(f, target, prefix):
    block_size = len(target)
    for b in range(256):
        c = bytes([b])
        r = f(prefix + c)
        i = get_first_duplicate_pair_index(r, block_size) + 2
        if block_wrapper(r, block_size)[i] == target:
            return c
    return None


def decrypt_ecb_oracle(f):
    block_size = detect_block_size(f)
    if not is_ebc_oracle(f, block_size):
        raise ValueError("Unable to detect ECB Mode from oracle!")
    alignment_prefix = get_alignment_prefix(f, block_size)

    target_size = get_target_size(f, alignment_prefix, block_size)
    full_block_count = target_size // block_size
    partial_block_size = target_size % block_size

    decrypted = bytearray()
    for i in range(full_block_count):
        for x in range(block_size):
            target = get_target_block(f, alignment_prefix, block_size, i, x)
            prefix = alignment_prefix + create_search_prefix(block_size, decrypted)
            decrypted.append(find_next_byte(f, target, prefix)[0])

    for x in range(partial_block_size):
        target = get_target_block(f, alignment_prefix, block_size, full_block_count, x)
        prefix = alignment_prefix + create_search_prefix(block_size, decrypted)
        decrypted.append(find_next_byte(f, target, prefix)[0])

    return decrypted  # No need to remove padding as we know the exact size


print("=== Decrypted Text ===")
print(decrypt_ecb_oracle(encryption_oracle).decode())
