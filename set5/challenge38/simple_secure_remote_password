#!/usr/bin/env python3
import sys
import hmac
from random import randint
from random import choice as randchoice
from hashlib import sha256

NIST_PRIME = 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF


# Small dict for example purposes
PASSWORD_DICTIONARY = [
    "123456",
    "password",
    "123456789",
    "12345678",
    "12345",
    "111111",
    "1234567",
    "sunshine",
    "qwerty",
    "iloveyou",
    "princess",
    "admin",
    "welcome",
    "666666",
    "abc123",
    "football",
    "123123",
    "monkey",
    "654321",
    "!@#$%^&*",
    "charlie",
    "aa123456",
    "donald",
    "password1",
    "qwerty123",
]


def random_bytes(size):
    i = randint(0, 2 ** (8 * size))
    return i.to_bytes(size, sys.byteorder)


def int_to_bytes(i):
    return i.to_bytes((i.bit_length() + 7) // 8, "big")


class simple_srp_client:
    def __init__(self, N=NIST_PRIME, g=2, k=3):
        self.N = N
        self.g = g
        self.k = k

        self._private_key = randint(0, self.N)
        self.public_key = pow(self.g, self._private_key, self.N)

    def generate_password_verifier(self, password):
        salt = random_bytes(64)
        x = self._get_x(salt, password)
        verifier = pow(self.g, x, self.N)
        return salt, verifier

    def _get_x(self, salt, password):
        xH = sha256(salt + password.encode()).digest()
        return int.from_bytes(xH, "big")

    def generate_session_key(self, servers_public_key, salt, u, password):
        x = self._get_x(salt, password)

        s_exp = self._private_key + u * x
        s = pow(servers_public_key, s_exp, self.N)
        return sha256(int_to_bytes(s)).digest()


class simple_srp_server:
    def __init__(self, verifier, N=NIST_PRIME, g=2, k=3):
        self.verifier = verifier
        self.N = N
        self.g = g
        self.k = k

        self._private_key = randint(0, self.N)
        self.public_key = pow(self.g, self._private_key, self.N)
        self.u = randint(0, 2 ** 128 - 1)

    def generate_session_key(self, clients_public_key):
        s_base = clients_public_key * pow(self.verifier, self.u, self.N)
        s = pow(s_base, self._private_key, self.N)
        return sha256(int_to_bytes(s)).digest()


class client:
    def __init__(self, username, password):
        self.username = username
        self._password = password
        self.logged_in = False  # We'll flip this if we could login!

    def start(self):
        self.srp = simple_srp_client()
        return {"username": self.username, "public_key": self.srp.public_key}

    def process_packet(self, packet):
        if packet.get("error", False):  # Server reported an error
            return None  # Drop the connection
        elif "public_key" in packet:  # 2nd handshake packet
            self._session_key = self.srp.generate_session_key(
                packet["public_key"], packet["salt"], packet["u"], self._password
            )
            mac = hmac.new(self._session_key, packet["salt"], "sha256")
            return {"proof": mac.digest()}
        elif packet.get("OK", False):  # Final handshake packet
            self.logged_in = True  # Server says we are authenticated!
            return None


class echo_server:
    def __init__(self, password_database):
        self.password_database = password_database

    def process_packet(self, packet):
        if "public_key" in packet:  # 1st handshake packet
            user = self.password_database.get(packet["username"], {})
            if not user:
                return {"error": True}
            srp = simple_srp_server(user["verifier"])
            self._session_key = srp.generate_session_key(packet["public_key"])
            self.salt_sent = user["salt"]  # Save for later verification
            return {"salt": self.salt_sent, "public_key": srp.public_key, "u": srp.u}
        elif "proof" in packet:  # 3rd handshake packet
            expected_mac = hmac.new(self._session_key, self.salt_sent, "sha256")
            if expected_mac.digest() != packet["proof"]:
                return {"error": True}
            return {"OK": True}


class basic_relay:
    def __init__(self, client_side, server_side, print_packets=False):
        self.client = client_side
        self.server = server_side
        self.print_packets = print_packets

    # Pass the simulated network packets back and forth between the client & server
    def go(self):
        request = self.client.start()  # Lets get the ball rolling
        while request is not None:
            if self.print_packets:
                print(f"Client Sending: {request}")

            response = self.server.process_packet(request)
            if self.print_packets:
                print(f"Server Sending: {response}")

            request = self.client.process_packet(response)


class bad_server:
    def process_packet(self, packet):
        if "public_key" in packet:  # 1st handshake packet
            self.username = packet["username"]
            srp = simple_srp_server(1)  # Provide a dummy verifier as we dont know it

            # Save for later cracking
            self.client_public_key = packet["public_key"]
            self.srp = srp
            self.salt_sent = random_bytes(64)  # Give them something to work with

            return {"salt": self.salt_sent, "public_key": srp.public_key, "u": srp.u}
        elif "proof" in packet:  # 3rd handshake packet
            self.client_proof = packet["proof"]
            return {"error": True}  # WHHOOPPSSSIES :P


def dict_attack(srp, clients_public_key, salt, proof):
    for password in PASSWORD_DICTIONARY:
        xH = sha256(salt + password.encode()).digest()
        x = int.from_bytes(xH, "big")
        srp.verifier = pow(srp.g, x, srp.N)
        key = srp.generate_session_key(clients_public_key)
        if hmac.new(key, salt, "sha256").digest() == proof:
            return password
    return None


def test_simple_srp():
    for _ in range(10):
        # Over a secure medium
        username = "alice"
        password = f"notalice'spassword{randint(0, 10)}"
        salt, verifier = simple_srp_client().generate_password_verifier(password)
        password_database = {username: {"salt": salt, "verifier": verifier}}

        # Over an unsecure medium
        alice = client(username, password)
        server = echo_server(password_database)
        pat = basic_relay(alice, server)
        pat.go()

        if not alice.logged_in:
            print("Alice failed to login!")
            return False
    return True


def test_dict_attack():
    # Over a secure medium & all legit setup
    username = "alice"
    password = randchoice(PASSWORD_DICTIONARY)
    salt, verifier = simple_srp_client().generate_password_verifier(password)
    password_database = {username: {"salt": salt, "verifier": verifier}}

    # Over an unsecure medium but pretending to be the server
    alice = client(username, password)
    eve = bad_server()
    pat = basic_relay(alice, eve)
    pat.go()
    found_password = dict_attack(
        eve.srp, eve.client_public_key, eve.salt_sent, eve.client_proof
    )

    # Over an unsecure medium but logging Eve logging in as Alice
    eve = client(username, found_password)
    server = echo_server(password_database)
    pat = basic_relay(eve, server)
    pat.go()

    if not eve.logged_in:
        print("Eve failed to crack alice's password!")
        return False
    return True


if test_simple_srp():
    print("Simple SRP Tests Passed!")
else:
    print("Simple SRP Tests Failed!")

if test_dict_attack():
    print("Simple SRP Dict Attack Tests Passed!")
else:
    print("Simple SRP Dict Attack Tests Failed!")
