#!/usr/bin/env python3
import sys
from decimal import Decimal, getcontext
from collections import namedtuple
from Crypto.Util import number
from random import randint


def random_bytes(size):
    i = randint(0, 2 ** (8 * size))
    return i.to_bytes(size, sys.byteorder)


def _get_prime(N=512, e=3):
    return number.getStrongPrime(N, e=e)


def cube_root(i):
    getcontext().prec = (i.bit_length() + 7) // 8
    answer = i ** (Decimal(1) / 3)
    return answer.quantize(Decimal("1."))


def invmod(a, n):
    t = 0
    new_t = 1
    r = n
    new_r = a
    while new_r != 0:
        quotient = r // new_r
        t, new_t = new_t, t - quotient * new_t
        r, new_r = new_r, r - quotient * new_r
    if r > 1:  # a is not invertible
        return None
    if t < 0:
        t += n
    return t


def int_to_bytes(i):
    return i.to_bytes((i.bit_length() + 7) // 8, "big")


class rsa:
    def generate_keypair(self, prime_size=512, e=3):
        self.e = e  # Public information provided with both keys
        p = _get_prime(N=prime_size, e=e)
        q = _get_prime(N=prime_size, e=e)
        self.public_key = p * q

        et = (p - 1) * (q - 1)
        self._private_key = invmod(e, et)

    def import_public_key(self, n, e=3):
        self.e = e
        self.public_key = n

    def encrypt(self, plain_text):
        # padding = bytes([randint(0, 255)])
        padding = bytes([69])  # Hehe random padding breaks this attack
        padded_plain_text = padding + plain_text  # To keep the zero'd prefixs
        msg = int.from_bytes(padded_plain_text, "big")
        return pow(msg, self.e, self.public_key)

    def decrypt(self, cipher_text):
        msg = pow(cipher_text, self._private_key, self.public_key)
        return int_to_bytes(msg)[1:]  # Drop the padding


pubkey_cipher_pair = namedtuple("pubkey_cipher_pair", ["public_key", "cipher_text"])


def test_broadcast_attack(loops=3):
    for _ in range(loops):
        msg = random_bytes(randint(32, 128))  # The secret to figure out

        # collect the publicly accessable information
        pairs = []
        for _ in range(3):
            r = rsa()
            r.generate_keypair()
            pairs.append(pubkey_cipher_pair(r.public_key, r.encrypt(msg)))

        # Using Chinese remainder theorem to break
        accumlation = 0
        for index, pair in enumerate(pairs):
            # Product of all public_keys excluding the key used for this
            #  cipher_text entry specificly
            m_s = 1
            for index_, pair_ in enumerate(pairs):
                if index_ != index:
                    m_s *= pair_.public_key

            accumlation += pair.cipher_text * m_s * invmod(m_s, pair.public_key)

        m_s_all = 1  # Product of all public_keys
        for pair in pairs:
            m_s_all *= pair.public_key

        # Cube root the result
        found_msg_raw = cube_root(accumlation % m_s_all)

        found_msg = int_to_bytes(int(found_msg_raw))[1:]
        if found_msg != msg:
            return False
    return True


if test_broadcast_attack():
    print("RSA Broadcast Attack Tests Passed!")
else:
    print("RSA Broadcast Attack Tests Failed!")
