#!/usr/bin/env python3
import sys
from random import randint
from base64 import b64decode
from Crypto.Cipher import AES

input = []
with open("input.txt") as f:
    for l in f:
        input.append(b64decode(l.strip()))


def random_bytes(size):
    i = randint(0, 2 ** (8 * size))
    return i.to_bytes(size, sys.byteorder)


unknown_key = random_bytes(16)


def ctr_crypt(key, nonce, plain_text, block_size=16):
    cipher = AES.new(
        key, AES.MODE_CTR, nonce=nonce.to_bytes(block_size // 2, sys.byteorder)
    )
    return cipher.encrypt(plain_text)


def text_letter_scores(b):
    s = 0
    for i in b:  # Python3 auto converts the bytes to int for me here
        if (i > 64 and i < 91) or (i > 96 and i < 123) or i == 32:
            s += 1
        elif i < 32 or i > 126:  # Non-displayable is bad
            s -= 1
    return s


def xor(a, b):
    r = int.from_bytes(a, sys.byteorder) ^ int.from_bytes(b, sys.byteorder)
    return r.to_bytes(len(a), sys.byteorder)


def xor_1byte(a, b):
    k = b * len(a)
    return xor(a, k)


def transpose(data):
    # Input: [b"ABCDEF", b"GHIJKL", b"123456", b"abcdef"]
    # Output: [b"AG1a", b"BH2b", b"CI3c", b"DJ4d", b"EK5e", b"FL6f"]
    output = []
    for r in data:
        for i, d in enumerate(r):
            if i > len(output) - 1:
                output.append(bytearray())
            output[i].append(d)
    return output


def get_1byte_xor_scores(data):
    scores = []
    for i in range(256):
        k = bytes([i])
        r = xor_1byte(data, k)
        scores.append((text_letter_scores(r), k))
    return scores


def get_top_key(raw_data):
    data = transpose(raw_data)
    output = bytearray()
    for r in data:
        scores_byte = get_1byte_xor_scores(r)
        scores_byte.sort(key=lambda t: t[0], reverse=True)
        output.append(scores_byte[0][1][0])
    return output


cipher_texts = [bytearray(ctr_crypt(unknown_key, 0, i)) for i in input]
top_key = get_top_key(cipher_texts)

print("=== Decrypted Text ===")
for r in cipher_texts:
    key = top_key[: len(r)]
    print(xor(key, r).decode())
