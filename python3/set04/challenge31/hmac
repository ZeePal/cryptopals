#!/usr/bin/env python3
import sys
import struct
import hmac as lib_hmac
from random import randint

tests = {
    "de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9": (
        b"key",
        b"The quick brown fox jumps over the lazy dog",
    )
}


def random_bytes(size):
    i = randint(0, 2 ** (8 * size))
    return i.to_bytes(size, sys.byteorder)


class sha1:
    digest_size = 20  # SHA1's digest byte size
    block_size = 64  # SHA1's block size in bytes

    word_size = 4  # SHA1's word size in bytes
    word_bits = word_size * 8  # SHA1's word size in bits
    word_mask = 2 ** 32 - 1  # Bitwise AND mask to limit int's to word_size

    def __init__(self):
        self._state = (0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0)
        self._message_size = 0  # Message size in bytes
        self._pending = bytearray()

    def _get_final_state(self):
        chunk = bytearray(self._pending)

        # The final real message size
        message_size = self._message_size + len(chunk)

        # Pre-processing to pad the message to a multiple of block_size
        chunk.append(0x80)
        # Magic Number 9: 1 byte for above pad & 8 bytes for final message size suffix
        remaining_length = (
            self.block_size - ((message_size + 9) % self.block_size)
        ) % self.block_size  # On perfect message size add no padding
        chunk.extend(b"\x00" * remaining_length)

        # Append the real message_size in bits as a 64bit int
        chunk.extend((message_size * 8).to_bytes(8, "big"))

        # Padded chunk maybe 2 blocks worth
        if len(chunk) > self.block_size:
            state = self._process_chunk(chunk[: self.block_size], self._state)
            chunk = chunk[self.block_size :]
        else:
            state = self._state
        return self._process_chunk(chunk, state)

    def _left_rotate(self, number, amount):
        return (
            (number << amount) | (number >> (self.word_bits - amount))
        ) & self.word_mask

    def _get_words(self, chunk):
        w = [
            int.from_bytes(chunk[i : i + self.word_size], "big")
            for i in range(0, len(chunk), self.word_size)
        ]

        for i in range(16, 80):
            w.append(
                self._left_rotate((w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]), 1)
            )
        return w

    def _process_chunk(self, chunk, state):
        a, b, c, d, e = state
        w = self._get_words(chunk)

        for i in range(0, 80):
            if i <= 19:
                f = d ^ (b & (c ^ d))
                k = 0x5A827999
            elif 20 <= i and i <= 39:
                f = b ^ c ^ d
                k = 0x6ED9EBA1
            elif 40 <= i and i <= 59:
                f = (b & c) ^ (d & (b ^ c))
                k = 0x8F1BBCDC
            else:
                f = b ^ c ^ d
                k = 0xCA62C1D6

            temp = ((self._left_rotate(a, 5)) + f + e + k + w[i]) & self.word_mask
            e = d
            d = c
            c = self._left_rotate(b, 30)
            b = a
            a = temp

        return (
            (state[0] + a) & self.word_mask,
            (state[1] + b) & self.word_mask,
            (state[2] + c) & self.word_mask,
            (state[3] + d) & self.word_mask,
            (state[4] + e) & self.word_mask,
        )

    def digest(self):
        return struct.pack(">5I", *self._get_final_state())

    def hexdigest(self):
        return self.digest().hex()

    def update(self, data):
        # Create the first block to update with based on the queued data in _pending
        next = bytearray(self._pending)
        i = self.block_size - len(next)
        next.extend(data[:i])

        # Loop though all full blocks and process them
        while len(next) == self.block_size:
            self._state = self._process_chunk(next, self._state)
            self._message_size += self.block_size
            next = data[i : i + self.block_size]
            i += self.block_size

        # What ever remains afterwards is put into _pending for later
        self._pending = bytearray(next)


def xor(a, b):
    r = int.from_bytes(a, sys.byteorder) ^ int.from_bytes(b, sys.byteorder)
    return r.to_bytes(len(a), sys.byteorder)


def hmac(hash, key, message):
    block_size = hash().block_size

    if len(key) > block_size:
        key_hash = hash()
        key_hash.update(key)
        key = key_hash.digest()

    if len(key) < block_size:
        key += b"\x00" * (block_size - len(key))

    o_key_pad = xor(key, b"\x5c" * block_size)
    i_key_pad = xor(key, b"\x36" * block_size)

    inner_hash = hash()
    inner_hash.update(i_key_pad)
    inner_hash.update(message)

    outer_hash = hash()
    outer_hash.update(o_key_pad)
    outer_hash.update(inner_hash.digest())

    return outer_hash.digest()


def test_hmac():
    for hash, data in tests.items():
        key = data[0]
        message = data[1]

        result = hmac(sha1, key, message).hex()
        if result != hash:
            print(f"Failed on: {result} != {hash} for {message} with {key}")
            return False
    return True


def test_hmac_random():
    for _ in range(100):
        msg = random_bytes(randint(1, 4096))
        key = random_bytes(randint(1, 128))
        my_hash = hmac(sha1, key, msg)
        hash = lib_hmac.new(key, msg, "sha1").digest()
        if my_hash != hash:
            print(f"Failed on: {my_hash} != {hash} for {msg} with {key}")
            return False
    return True


if test_hmac():
    print("HMAC Tests Passed!")
else:
    print("HMAC Tests Failed!")

if test_hmac_random():
    print("HMAC Random Tests Passed!")
else:
    print("HMAC Random Tests Failed!")
