#!/usr/bin/env python3
import sys
from random import randint

tests = {
    "2fd4e1c67a2d28fced849ee1bb76e7391b93eb12": b"The quick brown fox jumps over the lazy dog",
    "de9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3": b"The quick brown fox jumps over the lazy cog",
    "da39a3ee5e6b4b0d3255bfef95601890afd80709": b"",
    "031cce6ce8c1cf98aab41c1534ef673479c3b15f": (
        b"The quick brown fox jumps over the lazy cog" * 100
    ),
}


def random_bytes(size):
    i = randint(0, 2 ** (8 * size))
    return i.to_bytes(size, sys.byteorder)


unknown_key = random_bytes(16)


class sha1:
    digest_size = 20  # SHA1's digest byte size
    block_size = 64  # SHA1's block size in bytes

    word_size = 4  # SHA1's word size in bytes
    word_bits = word_size * 8  # SHA1's word size in bits
    word_mask = 2 ** 32 - 1  # Bitwise AND mask to limit int's to word_size

    def __init__(self):
        self._state = (0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0)
        self._message_size = 0  # Message size in bytes
        self._pending = bytearray()

    def _get_final_state(self):
        chunk = bytearray(self._pending)

        # The final real message size
        message_size = self._message_size + len(chunk)

        # Pre-processing to pad the message to a multiple of block_size
        chunk.append(0x80)
        # Magic Number 9: 1 byte for above pad & 8 bytes for final message size suffix
        remaining_length = self.block_size - ((message_size + 9) % self.block_size)
        chunk.extend(b"\x00" * remaining_length)

        # Append the real message_size in bits as a 64bit int
        chunk.extend((message_size * 8).to_bytes(8, "big"))
        return self._process_chunk(chunk)

    def _left_rotate(self, number, amount):
        return (
            (number << amount) | (number >> (self.word_bits - amount))
        ) & self.word_mask

    def _get_words(self, chunk):
        w = [
            int.from_bytes(chunk[i : i + self.word_size], "big")
            for i in range(0, len(chunk), self.word_size)
        ]

        for i in range(16, 80):
            w.append(
                self._left_rotate((w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]), 1)
            )
        return w

    def _process_chunk(self, chunk):
        a, b, c, d, e = self._state
        w = self._get_words(chunk)

        for i in range(0, 80):
            if i <= 19:
                f = d ^ (b & (c ^ d))
                k = 0x5A827999
            elif 20 <= i and i <= 39:
                f = b ^ c ^ d
                k = 0x6ED9EBA1
            elif 40 <= i and i <= 59:
                f = (b & c) ^ (d & (b ^ c))
                k = 0x8F1BBCDC
            else:
                f = b ^ c ^ d
                k = 0xCA62C1D6

            temp = ((self._left_rotate(a, 5)) + f + e + k + w[i]) & self.word_mask
            e = d
            d = c
            c = self._left_rotate(b, 30)
            b = a
            a = temp

        return (
            (self._state[0] + a) & self.word_mask,
            (self._state[1] + b) & self.word_mask,
            (self._state[2] + c) & self.word_mask,
            (self._state[3] + d) & self.word_mask,
            (self._state[4] + e) & self.word_mask,
        )

    def digest(self):
        h0, h1, h2, h3, h4 = self._get_final_state()
        return (h0 << 128) | (h1 << 96) | (h2 << 64) | (h3 << 32) | h4

    def hexdigest(self):
        return "{0:0{1}x}".format(self.digest(), self.digest_size * 2)

    def update(self, data):
        # Create the first block to update with based on the queued data in _pending
        next = bytearray(self._pending)
        i = self.block_size - len(next)
        next.extend(data[:i])

        # Loop though all full blocks and process them
        while len(next) == self.block_size:
            self._state = self._process_chunk(next)
            self._message_size += self.block_size
            next = data[i : i + self.block_size]
            i += self.block_size

        # What ever remains afterwards is put into _pending for later
        self._pending = bytearray(next)


def get_mac(data):
    h = sha1()
    h.update(unknown_key)
    h.update(data)
    return h.hexdigest()


def validate_mac(data, mac):
    return get_mac(data) == mac


def test_mac():
    for _ in range(1000):
        data = bytearray(random_bytes(randint(32, 128)))
        data_mac = get_mac(data)
        if not validate_mac(data, data_mac):
            print("Failed to validate valid mac")
            return False

        data += b"\x00"
        if validate_mac(data, data_mac):
            print("Failed to append to data without mac noticing")
            return False

        del data[-1]
        data[-1] = (data[-1] + 1) % 256
        if validate_mac(data, data_mac):
            print("Failed to alter data without mac noticing")
            return False

        del data[-1]
        if validate_mac(data, data_mac):
            print("Failed to strip data without mac noticing")
            return False
    return True


def test_sha1():
    for hash, data in tests.items():
        h = sha1()
        h.update(data)
        my_hash = h.hexdigest()
        if my_hash != hash:
            print(f"Failed on: {my_hash} != {hash} for {data}")
            return False

        h = sha1()
        for l in data:
            h.update(bytes([l]))
        my_hash = h.hexdigest()
        if my_hash != hash:
            print(f"Failed on multi update: {my_hash} != {hash} for {data}")
            return False
    return True


if test_sha1():
    print("SHA1 Tests Passed!")
else:
    print("SHA1 Tests Failed!")

if test_mac():
    print("MAC Tests Passed!")
else:
    print("MAC Tests Failed!")
