#!/usr/bin/env python3
import sys
from random import randint
from time import time, sleep

wait_range_min, wait_range_max = 5, 10


class mt19937:
    # Source: https://en.wikipedia.org/wiki/Mersenne_Twister
    w = 32
    n = 624
    m = 397
    r = 31

    a = int("9908B0DF", 16)

    u = 11
    d = int("FFFFFFFF", 16)

    s = 7
    b = int("9D2C5680", 16)

    t = 15
    c = int("EFC60000", 16)

    l = 18

    f = 1812433253

    lower_mask = (1 << r) - 1
    w_mask = 2 ** w - 1  # lowest w bits of X
    upper_mask = w_mask & (~lower_mask)

    def __init__(self, seed=5489):
        self.state = [None] * self.n
        self.state[0] = seed
        self.index = 0
        self.seeded_to = 1

    def extract_number(self):
        self.jit_seed()
        self.jit_twist()

        y = self.state[self.index]
        y ^= (y >> self.u) & self.d
        y ^= (y << self.s) & self.b
        y ^= (y << self.t) & self.c
        y ^= y >> self.l

        self.index += 1
        return self.w_mask & y

    def jit_seed(self):
        max_state_index_needed = (self.index + self.m) % self.n
        if not max_state_index_needed < self.seeded_to:
            for i in range(self.seeded_to, max_state_index_needed + 1):
                self.state[i] = self.w_mask & (
                    self.f * (self.state[i - 1] ^ (self.state[i - 1] >> (self.w - 2)))
                    + i
                )
            self.seeded_to = max_state_index_needed + 1

    def jit_twist(self):
        if self.index >= self.n:
            self.index = 0

        i = self.index
        x = (self.state[i] & self.upper_mask) + (
            self.state[(i + 1) % self.n] & self.lower_mask
        )
        xA = x >> 1
        if (x % 2) != 0:
            xA ^= self.a
        self.state[i] = self.state[(i + self.m) % self.n] ^ xA


def get_password_reset_token():
    sleep(randint(wait_range_min, wait_range_max))
    output = bytearray()
    rng = mt19937(int(time()))
    for _ in range(8):  # 32 byte / 256 bit length
        output.extend(rng.extract_number().to_bytes(4, sys.byteorder))
    sleep(randint(wait_range_min, wait_range_max))
    return output


def find_epoch_seed_from_value(value, min=0, max=None):
    if max is None:
        max = int(time())

    for i in range(min, max + 1):
        rng = mt19937(i)
        result = bytearray()
        for _ in range(len(value) // 4):  # 32 byte / 256 bit length
            result.extend(rng.extract_number().to_bytes(4, sys.byteorder))

        if result == value:
            return i
    return None


print("Getting Password Reset Token...")
time_before = int(time())
password_token = get_password_reset_token()

print("Searching for its seed...")
seed = find_epoch_seed_from_value(password_token, min=time_before)
print(f"Found the seed: {seed}")
